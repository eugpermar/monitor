version: 2

default_workspace: &default_workspace
  # Smallest circleci official image at 11/17. We don't need any tools here.
  docker:
    - image: docker

save_cache:
  - &save_cache
    save_cache:
      key: rbm-cache-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "docker-cache/built-images.sum" }}
      paths:
        - docker-cache/built-images.tgz
        - docker-cache/built-images.sum

restore_cache:
  - &restore_cache
    restore_cache:
      keys:
        - rbm-cache-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
        - rbm-cache-{{ .Branch }}-
        - rbm-cache-


# Save all docker images in cache
save_docker_images:
  - &save_docker_images
    # Save tags & history. If you don't save history, can't re-use docker cache
    # Keep in sync the diff with load_docker_images
    run: |
      mkdir -p docker-cache
      docker images --filter "dangling=false" \
        --format '{{.ID}} {{.Repository}} {{.Tag}}' \
        | grep 'monitor-dev\|wizzieio/prozzie-monitor\|spotify/kafka' | sort \
        > docker_images.newsum
      if ! diff docker_images.newsum docker-cache/built-images.sum; then
        mv docker_images.newsum docker-cache/built-images.sum
        docker_images=$(docker images --filter 'dangling=false' \
          --format '{{.Repository}}:{{.Tag}}')
        docker_histories=$(for i in ${docker_images}; \
          do docker history -q $i | grep -v missing; \
        done)
        docker save ${docker_images} ${docker_histories} \
          | gzip > docker-cache/built-images.tgz
      fi

load_docker_images:
  - &load_docker_images
    # Keep in sync the summary generation with save_docker_images
    run: |
      if [[ -f docker-cache/built-images.tgz ]]; then
        docker load --input docker-cache/built-images.tgz;
        docker images --filter "dangling=false" --format '{{.ID}} {{.Repository}} {{.Tag}}' | sort > docker-cache/built-images.sum
      else
        echo "NO DOCKER CACHE";
      fi

jobs:
  # Check source format
  clang-format:
    docker:
      - image: alabate/clang-format
    steps:
      - checkout
      - run: |
            out="$(find . -name '*.c' -o -name '*.h' -exec bash -c \
              "diff  -Nu {} <(clang-format {} )" \;)"
            printf '%s' "$out"
            test -z "$out"


  # (Template) execute a single command in development docker
  T_dev_run: &T_dev_run
    <<: *default_workspace
    steps:
      - setup_remote_docker
      - checkout
      - *restore_cache
      - *load_docker_images
      # Create development environment
      - run: apk add --no-cache make git
      # Don't want to send docker images
      - run: printf '/docker-cache/\n' >> .dockerignore
      # sed: Don't want thread-safety test because musl bug
      - run: sed -i 's%\$(TESTS_\(DRD\|HELGRIND\)_XML)%%g' Makefile

      # Build development container
      - run:
          environment:
            DOCKER_OUTPUT_TAG: monitor-dev
            DOCKER_OUTPUT_VERSION: latest
          command: make dev-docker

      # Build binary
      - run: env DOCKER_OUTPUT_VERSION="test-${CIRCLE_JOB}" make docker

      # Get binary artifacts
      - run: |
          docker run --rm --entrypoint tar \
            "wizzieio/prozzie-monitor:test-${CIRCLE_JOB}" \
            c rb_monitor Makefile.config \
            | tar xv;

      # Get coverage artifacts (if any). Need to eval for proper arguments
      # treatment (spaces, quotes, ...)
      - run: |
          if [[ "${CIRCLE_JOB}" == coverage ]]; then
            BUILDER_ID="$(eval docker build \
              ${DOCKER_BUILD_PARAMETERS} \
              --target mon-builder \
              -f docker/Dockerfile -q .)"
            docker run --rm --entrypoint find "$BUILDER_ID" \
              . -name '*.gcno' -exec tar c {} \+ \
              | tar xv;
          fi
      # Launch test kafka
      - run: docker run -d --hostname kafka --name kafka spotify/kafka;
      # Launch test container
      - run: docker run -dt --link kafka --name dev-container monitor-dev;
      # Delete binary generation and copy artifacts
      - run: >
          sed -i '/^$(BIN):/,/!^\t/ {s%$(BIN):.*%$(BIN):\n\ttouch "$@"%; /^\t/d}'
          -- mklove/Makefile.base
      - run: docker cp ./ dev-container:/app
      # Actual commands run. Exit 255 will stop iteration
      # Redirect to file and read it is a busybox xargs workaround: it does not
      # return error code if executed command exit with 255!
      - run: |
            printf "%s\n" "${docker_cmds}" | \
              xargs -I {} -t -n 1 \
              docker exec -e PYTEST="$PYTEST" -e PYTEST_JOBS="$PYTEST_JOBS" \
                dev-container sh -c '{} || exit 255' | tee xargs_out.txt;
            grep 'xargs: .*: exited with status 255; aborting' -- xargs_out.txt \
              && exit 1 \
              || rm -f -- xargs_out.txt;

      # Collect results
      - run: docker cp dev-container:/app/tests/ /tmp
      - run: docker cp dev-container:/app/coverage.out.html . || mkdir -p coverage.out.html
      - *save_docker_images
      - *save_cache
      - store_test_results:
          path: /tmp/tests
      - store_artifacts:
          path: coverage.out.html


  # Release build -> no asserts, optimizations on
  release:
    <<: *T_dev_run
    environment:
      - PYTEST_JOBS: 16
      - PYTEST: py.test-3
      - docker_cmds: |
          make checks
          make memchecks

  # Test with assertions on
  assertions:
    <<: *T_dev_run
    environment:
      - PYTEST_JOBS: 16
      - PYTEST: py.test-3
      - docker_cmds: |
          sed -i 's/-DNDEBUG//g' Makefile.config
          make
          make checks

  coverage:
    <<: *T_dev_run
    environment:
      - PYTEST_JOBS: 16
      - PYTEST: py.test-3
      - DOCKER_BUILD_PARAMETERS: --build-arg CONFIGURE_OPTIONS='--disable-optimization --enable-coverage'
      - docker_cmds: |
          make checks
          make memchecks
          make coverage

#
#  # Check source code
#  static-analyzer:
#    <<: *default_workspace
#    docker:
#      - image: alabate/clang-format
#    steps:
#      - setup_remote_docker
#      - run: |
#              apt update && apt install -y --no-install-recommends \
#              software-properties-common python-software-properties wget
#      - run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -
#      - run: |
#              echo \
#              'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-5.0 main' \
#              >> /etc/apt/sources.list
#      - run: |
#              apt update && \
#              apt install make gcc libz-dev clang-5.0 librdkafka-dev -y \
#                  --no-install-recommends
#      - run: docker cp static_analyzer:/app /home/circleci/workspace
#      - run: |
#              cd /home/circleci/workspace; \
#              find src/ -name '*.o' -delete; make src/version.h; \
#              scan-build-5.0 --status-bugs -o /tmp/scan-build make \
#              $(find src -name '*.c' -print | sed 's/\.c/\.o/;')
#
#      - store_artifacts:
#          path: /tmp/scan-build


workflows:
  version: 2
  binary:
    jobs:
      - clang-format

      - assertions
      - release
      - coverage
      #- checks:
      #    requires:
      #      - make

      #
